import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { z } from "zod";
import { insertPostSchema, insertCommentSchema, insertReactionSchema, insertUserSchema } from "@shared/schema";
// We'll implement WebSockets in a future update

export async function registerRoutes(app: Express): Promise<Server> {
  const httpServer = createServer(app);
  
  // Create a simpler server setup without WebSockets for now
  // We'll add real-time features in a future update
  console.log('Starting ZenithHub server...');
  
  // Temporary dummy broadcast function until we implement WebSockets properly
  const broadcast = (data: any) => {
    console.log('Broadcasting (disabled):', data);
    // Real-time updates are disabled for now
  };
  
  // Authentication Routes
  app.post('/api/auth/login', async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required' });
      }
      
      const user = await storage.getUserByUsername(username);
      
      if (!user || user.password !== password) {  // In a real app, use bcrypt to compare hashed passwords
        return res.status(401).json({ message: 'Invalid credentials' });
      }
      
      // In a real app, use JWT or session for authentication
      // For simplicity, we'll just set user as logged in and return user data
      await storage.setUserOnlineStatus(user.id, true);
      
      // Send back user data without password
      const { password: _, ...userWithoutPassword } = user;
      return res.status(200).json(userWithoutPassword);
    } catch (error) {
      console.error('Login error:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/auth/register', async (req, res) => {
    try {
      const userSchema = insertUserSchema.extend({
        confirmPassword: z.string()
      }).refine(data => data.password === data.confirmPassword, {
        message: "Passwords don't match",
        path: ["confirmPassword"],
      });
      
      const result = userSchema.safeParse(req.body);
      
      if (!result.success) {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: result.error.format() 
        });
      }
      
      const { confirmPassword, ...userData } = result.data;
      
      // Check if username or email already exists
      const existingUser = await storage.getUserByUsername(userData.username);
      if (existingUser) {
        return res.status(409).json({ message: 'Username already taken' });
      }
      
      // Create user
      const newUser = await storage.createUser(userData);
      
      // Send back user data without password
      const { password, ...userWithoutPassword } = newUser;
      return res.status(201).json(userWithoutPassword);
    } catch (error) {
      console.error('Registration error:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/auth/logout', async (req, res) => {
    try {
      const userId = req.body.userId;
      
      if (userId) {
        await storage.setUserOnlineStatus(userId, false);
      }
      
      return res.status(200).json({ message: 'Logged out successfully' });
    } catch (error) {
      console.error('Logout error:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Post Routes
  app.get('/api/posts', async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;
      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;
      
      const posts = await storage.getPosts(limit, offset);
      
      // Enhance posts with author info, comments count, and reactions
      const enhancedPosts = await Promise.all(posts.map(async (post) => {
        const author = await storage.getUser(post.userId);
        const comments = await storage.getPostComments(post.id);
        const reactions = await storage.getPostReactions(post.id);
        
        // Group reactions by type
        const reactionTypes = Array.from(new Set(reactions.map(r => r.type)));
        
        return {
          ...post,
          author: author ? {
            id: author.id,
            username: author.username,
            displayName: author.displayName,
            avatar: author.avatar,
          } : undefined,
          commentsCount: comments.length,
          reactions: {
            count: reactions.length,
            types: reactionTypes
          }
        };
      }));
      
      return res.status(200).json(enhancedPosts);
    } catch (error) {
      console.error('Error fetching posts:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/posts/:id', async (req, res) => {
    try {
      const postId = parseInt(req.params.id);
      const post = await storage.getPost(postId);
      
      if (!post) {
        return res.status(404).json({ message: 'Post not found' });
      }
      
      const author = await storage.getUser(post.userId);
      const comments = await storage.getPostComments(post.id);
      const reactions = await storage.getPostReactions(post.id);
      const reactionTypes = Array.from(new Set(reactions.map(r => r.type)));
      
      // Get enhanced comments with author info
      const enhancedComments = await Promise.all(comments.map(async (comment) => {
        const commentAuthor = await storage.getUser(comment.userId);
        return {
          ...comment,
          author: commentAuthor ? {
            id: commentAuthor.id,
            username: commentAuthor.username,
            displayName: commentAuthor.displayName,
            avatar: commentAuthor.avatar,
          } : undefined
        };
      }));
      
      const enhancedPost = {
        ...post,
        author: author ? {
          id: author.id,
          username: author.username,
          displayName: author.displayName,
          avatar: author.avatar,
        } : undefined,
        comments: enhancedComments,
        reactions: {
          count: reactions.length,
          types: reactionTypes
        }
      };
      
      return res.status(200).json(enhancedPost);
    } catch (error) {
      console.error('Error fetching post:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/posts', async (req, res) => {
    try {
      const result = insertPostSchema.safeParse(req.body);
      
      if (!result.success) {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: result.error.format() 
        });
      }
      
      const newPost = await storage.createPost(result.data);
      
      // Notify connected clients about new post
      broadcast({
        type: 'new_post',
        postId: newPost.id,
        userId: newPost.userId
      });
      
      return res.status(201).json(newPost);
    } catch (error) {
      console.error('Error creating post:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/users/:userId/posts', async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      const posts = await storage.getUserPosts(userId);
      
      // Enhance posts with author info, comments count, and reactions
      const enhancedPosts = await Promise.all(posts.map(async (post) => {
        const comments = await storage.getPostComments(post.id);
        const reactions = await storage.getPostReactions(post.id);
        const reactionTypes = Array.from(new Set(reactions.map(r => r.type)));
        
        return {
          ...post,
          author: {
            id: user.id,
            username: user.username,
            displayName: user.displayName,
            avatar: user.avatar,
          },
          commentsCount: comments.length,
          reactions: {
            count: reactions.length,
            types: reactionTypes
          }
        };
      }));
      
      return res.status(200).json(enhancedPosts);
    } catch (error) {
      console.error('Error fetching user posts:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Comment Routes
  app.get('/api/posts/:postId/comments', async (req, res) => {
    try {
      const postId = parseInt(req.params.postId);
      const post = await storage.getPost(postId);
      
      if (!post) {
        return res.status(404).json({ message: 'Post not found' });
      }
      
      const comments = await storage.getPostComments(postId);
      
      // Enhance comments with author info
      const enhancedComments = await Promise.all(comments.map(async (comment) => {
        const author = await storage.getUser(comment.userId);
        return {
          ...comment,
          author: author ? {
            id: author.id,
            username: author.username,
            displayName: author.displayName,
            avatar: author.avatar,
          } : undefined
        };
      }));
      
      return res.status(200).json(enhancedComments);
    } catch (error) {
      console.error('Error fetching comments:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/posts/:postId/comments', async (req, res) => {
    try {
      const postId = parseInt(req.params.postId);
      const post = await storage.getPost(postId);
      
      if (!post) {
        return res.status(404).json({ message: 'Post not found' });
      }
      
      const commentData = {
        ...req.body,
        postId
      };
      
      const result = insertCommentSchema.safeParse(commentData);
      
      if (!result.success) {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: result.error.format() 
        });
      }
      
      const newComment = await storage.createComment(result.data);
      
      // Get author info for the response
      const author = await storage.getUser(newComment.userId);
      const enhancedComment = {
        ...newComment,
        author: author ? {
          id: author.id,
          username: author.username,
          displayName: author.displayName,
          avatar: author.avatar,
        } : undefined
      };
      
      // Create notification for post owner if commenter is not the post owner
      if (post.userId !== newComment.userId) {
        const commenter = await storage.getUser(newComment.userId);
        if (commenter) {
          await storage.createNotification({
            userId: post.userId,
            triggeredBy: newComment.userId,
            type: 'comment',
            content: `commented on your post: "${newComment.content.substring(0, 50)}${newComment.content.length > 50 ? '...' : ''}"`,
            link: `/posts/${post.id}`
          });
          
          // Notify connected clients about new notification
          broadcast({
            type: 'new_notification',
            userId: post.userId,
            triggeredBy: newComment.userId,
            notificationType: 'comment',
            postId: post.id
          });
        }
      }
      
      // Notify connected clients about new comment
      broadcast({
        type: 'new_comment',
        postId,
        commentId: newComment.id,
        userId: newComment.userId
      });
      
      return res.status(201).json(enhancedComment);
    } catch (error) {
      console.error('Error creating comment:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Reaction Routes
  app.post('/api/posts/:postId/reactions', async (req, res) => {
    try {
      const postId = parseInt(req.params.postId);
      const post = await storage.getPost(postId);
      
      if (!post) {
        return res.status(404).json({ message: 'Post not found' });
      }
      
      const reactionData = {
        ...req.body,
        postId
      };
      
      const result = insertReactionSchema.safeParse(reactionData);
      
      if (!result.success) {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: result.error.format() 
        });
      }
      
      const reaction = await storage.createReaction(result.data);
      
      // Create notification for post owner if reactor is not the post owner
      if (post.userId !== reaction.userId) {
        const reactor = await storage.getUser(reaction.userId);
        if (reactor) {
          await storage.createNotification({
            userId: post.userId,
            triggeredBy: reaction.userId,
            type: 'like',
            content: `${reaction.type}d your post`,
            link: `/posts/${post.id}`
          });
          
          // Notify connected clients about new notification
          broadcast({
            type: 'new_notification',
            userId: post.userId,
            triggeredBy: reaction.userId,
            notificationType: 'reaction',
            postId: post.id
          });
        }
      }
      
      // Get updated reactions for the post
      const reactions = await storage.getPostReactions(postId);
      const reactionTypes = Array.from(new Set(reactions.map(r => r.type)));
      
      // Notify connected clients about reaction update
      broadcast({
        type: 'reaction_update',
        postId,
        userId: reaction.userId,
        reactionType: reaction.type,
        totalReactions: reactions.length
      });
      
      return res.status(200).json({
        reaction,
        totalReactions: reactions.length,
        types: reactionTypes
      });
    } catch (error) {
      console.error('Error handling reaction:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // User Routes
  app.get('/api/users/:username', async (req, res) => {
    try {
      const username = req.params.username;
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Don't send the password back
      const { password, ...userWithoutPassword } = user;
      
      return res.status(200).json(userWithoutPassword);
    } catch (error) {
      console.error('Error fetching user:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.patch('/api/users/profile', async (req, res) => {
    try {
      const userId = req.body.id;
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Remove fields that shouldn't be updated
      const { id, password, isOnline, createdAt, ...updateData } = req.body;
      
      const updatedUser = await storage.updateUser(userId, updateData);
      
      if (!updatedUser) {
        return res.status(404).json({ message: 'Failed to update user' });
      }
      
      // Don't send the password back
      const { password: _, ...userWithoutPassword } = updatedUser;
      
      return res.status(200).json(userWithoutPassword);
    } catch (error) {
      console.error('Error updating profile:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Friends & Friendship Routes
  app.get('/api/users/friends', async (req, res) => {
    try {
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const friendships = await storage.getFriendships(userId, 'accepted');
      
      // Get friend details
      const friends = await Promise.all(friendships.map(async (friendship) => {
        const friendId = friendship.userId === userId ? friendship.friendId : friendship.userId;
        const friend = await storage.getUser(friendId);
        
        if (!friend) return null;
        
        // Don't send the password back
        const { password, ...friendWithoutPassword } = friend;
        
        return friendWithoutPassword;
      }));
      
      // Filter out any null values (in case a friend was deleted)
      const validFriends = friends.filter(Boolean);
      
      return res.status(200).json(validFriends);
    } catch (error) {
      console.error('Error fetching friends:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/users/friend-requests', async (req, res) => {
    try {
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      // Get pending friend requests where this user is the recipient
      const friendships = await storage.getFriendships(userId, 'pending');
      const pendingRequests = friendships.filter(f => f.friendId === userId);
      
      // Get sender details
      const requests = await Promise.all(pendingRequests.map(async (request) => {
        const sender = await storage.getUser(request.userId);
        
        if (!sender) return null;
        
        // Don't send the password back
        const { password, ...senderWithoutPassword } = sender;
        
        return {
          id: request.id,
          sender: senderWithoutPassword,
          createdAt: request.createdAt
        };
      }));
      
      // Filter out any null values
      const validRequests = requests.filter(Boolean);
      
      return res.status(200).json(validRequests);
    } catch (error) {
      console.error('Error fetching friend requests:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/users/:userId/friend-request', async (req, res) => {
    try {
      const targetUserId = parseInt(req.params.userId);
      const senderId = parseInt(req.body.userId);
      
      if (!senderId) {
        return res.status(400).json({ message: 'Sender ID is required' });
      }
      
      if (targetUserId === senderId) {
        return res.status(400).json({ message: 'Cannot send friend request to yourself' });
      }
      
      // Check if users exist
      const sender = await storage.getUser(senderId);
      const targetUser = await storage.getUser(targetUserId);
      
      if (!sender || !targetUser) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Check if friendship already exists
      const existingFriendship = await storage.getFriendship(senderId, targetUserId);
      
      if (existingFriendship) {
        return res.status(409).json({ 
          message: `Friend request already ${existingFriendship.status}`,
          status: existingFriendship.status
        });
      }
      
      // Create friend request
      const friendship = await storage.createFriendship({
        userId: senderId,
        friendId: targetUserId,
        status: 'pending'
      });
      
      // Create notification for target user
      await storage.createNotification({
        userId: targetUserId,
        triggeredBy: senderId,
        type: 'friend',
        content: 'sent you a friend request',
        link: `/friends`
      });
      
      // Notify connected clients
      broadcast({
        type: 'new_friend_request',
        userId: targetUserId,
        senderId: senderId
      });
      
      return res.status(201).json(friendship);
    } catch (error) {
      console.error('Error sending friend request:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/users/friend-requests/:requestId', async (req, res) => {
    try {
      const requestId = parseInt(req.params.requestId);
      const { accept, userId } = req.body;
      
      if (accept === undefined || !userId) {
        return res.status(400).json({ message: 'Accept status and user ID are required' });
      }
      
      // Get the friend request
      const friendship = await storage.getFriendships(userId).then(
        friendships => friendships.find(f => f.id === requestId)
      );
      
      if (!friendship) {
        return res.status(404).json({ message: 'Friend request not found' });
      }
      
      // Make sure the logged in user is the recipient
      if (friendship.friendId !== userId) {
        return res.status(403).json({ message: 'Not authorized to respond to this request' });
      }
      
      // Update friendship status
      const newStatus = accept ? 'accepted' : 'rejected';
      const updatedFriendship = await storage.updateFriendshipStatus(requestId, newStatus);
      
      if (!updatedFriendship) {
        return res.status(500).json({ message: 'Failed to update friend request' });
      }
      
      // If accepted, create notification for sender
      if (accept) {
        await storage.createNotification({
          userId: friendship.userId,
          triggeredBy: userId,
          type: 'friend',
          content: 'accepted your friend request',
          link: `/profile/${userId}`
        });
        
        // Notify connected clients
        broadcast({
          type: 'friend_request_accepted',
          userId: friendship.userId,
          friendId: userId
        });
      }
      
      return res.status(200).json(updatedFriendship);
    } catch (error) {
      console.error('Error responding to friend request:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Notification Routes
  app.get('/api/notifications', async (req, res) => {
    try {
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const notifications = await storage.getUserNotifications(userId);
      
      // Enhance notifications with triggerer info
      const enhancedNotifications = await Promise.all(notifications.map(async (notification) => {
        // Skip enhancing for system notifications
        if (notification.userId === notification.triggeredBy) {
          return notification;
        }
        
        const triggerer = await storage.getUser(notification.triggeredBy);
        return {
          ...notification,
          triggerer: triggerer ? {
            id: triggerer.id,
            username: triggerer.username,
            displayName: triggerer.displayName,
            avatar: triggerer.avatar,
          } : undefined
        };
      }));
      
      return res.status(200).json(enhancedNotifications);
    } catch (error) {
      console.error('Error fetching notifications:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.patch('/api/notifications/:id', async (req, res) => {
    try {
      const notificationId = parseInt(req.params.id);
      const { isRead } = req.body;
      
      if (isRead === undefined) {
        return res.status(400).json({ message: 'isRead status is required' });
      }
      
      const notification = await storage.markNotificationAsRead(notificationId);
      
      if (!notification) {
        return res.status(404).json({ message: 'Notification not found' });
      }
      
      return res.status(200).json(notification);
    } catch (error) {
      console.error('Error updating notification:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.patch('/api/notifications/mark-all-read', async (req, res) => {
    try {
      const userId = parseInt(req.body.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      await storage.markAllNotificationsAsRead(userId);
      
      return res.status(200).json({ message: 'All notifications marked as read' });
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Message Routes
  app.get('/api/messages/conversations', async (req, res) => {
    try {
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const conversations = await storage.getUserConversations(userId);
      
      // Enhance conversations with participant info and last message
      const enhancedConversations = await Promise.all(conversations.map(async (conversation) => {
        // Get participants except current user
        const participants = await storage.getConversationMessages(conversation.id);
        const lastMessage = participants.length > 0 ? participants[participants.length - 1] : null;
        
        // Get all participants
        const participantsData: any[] = [];
        const seenUserIds = new Set<number>();
        
        for (const message of participants) {
          if (!seenUserIds.has(message.userId)) {
            const user = await storage.getUser(message.userId);
            if (user && user.id !== userId) {
              seenUserIds.add(user.id);
              participantsData.push({
                id: user.id,
                username: user.username,
                displayName: user.displayName,
                avatar: user.avatar,
                isOnline: user.isOnline
              });
            }
          }
        }
        
        return {
          id: conversation.id,
          participants: participantsData,
          lastMessage: lastMessage ? {
            id: lastMessage.id,
            content: lastMessage.content,
            createdAt: lastMessage.createdAt,
            isRead: lastMessage.isRead,
            userId: lastMessage.userId
          } : null,
          updatedAt: conversation.updatedAt
        };
      }));
      
      return res.status(200).json(enhancedConversations);
    } catch (error) {
      console.error('Error fetching conversations:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/messages/conversations/:id', async (req, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const messages = await storage.getConversationMessages(conversationId);
      
      // Enhance messages with sender info
      const enhancedMessages = await Promise.all(messages.map(async (message) => {
        const sender = await storage.getUser(message.userId);
        return {
          ...message,
          sender: sender ? {
            id: sender.id,
            username: sender.username,
            displayName: sender.displayName,
            avatar: sender.avatar,
          } : undefined,
          isFromMe: message.userId === userId
        };
      }));
      
      return res.status(200).json(enhancedMessages);
    } catch (error) {
      console.error('Error fetching messages:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/messages/conversations/:id', async (req, res) => {
    try {
      const conversationId = parseInt(req.params.id);
      const { content, userId } = req.body;
      
      if (!content || !userId) {
        return res.status(400).json({ message: 'Content and user ID are required' });
      }
      
      const newMessage = await storage.sendMessage({
        conversationId,
        userId,
        content
      });
      
      // Get sender info for the response
      const sender = await storage.getUser(userId);
      const enhancedMessage = {
        ...newMessage,
        sender: sender ? {
          id: sender.id,
          username: sender.username,
          displayName: sender.displayName,
          avatar: sender.avatar,
        } : undefined,
        isFromMe: true
      };
      
      // Notify connected clients about new message
      broadcast({
        type: 'new_message',
        conversationId,
        message: enhancedMessage
      });
      
      return res.status(201).json(enhancedMessage);
    } catch (error) {
      console.error('Error sending message:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.post('/api/messages/conversations', async (req, res) => {
    try {
      const { userId, participantId } = req.body;
      
      if (!userId || !participantId) {
        return res.status(400).json({ message: 'User ID and participant ID are required' });
      }
      
      // Check if users exist
      const user = await storage.getUser(userId);
      const participant = await storage.getUser(participantId);
      
      if (!user || !participant) {
        return res.status(404).json({ message: 'User not found' });
      }
      
      // Create conversation
      const conversation = await storage.createConversation([userId, participantId]);
      
      return res.status(201).json({
        id: conversation.id,
        participants: [
          {
            id: user.id,
            username: user.username,
            displayName: user.displayName,
            avatar: user.avatar,
            isOnline: user.isOnline
          },
          {
            id: participant.id,
            username: participant.username,
            displayName: participant.displayName,
            avatar: participant.avatar,
            isOnline: participant.isOnline
          }
        ],
        lastMessage: null,
        updatedAt: conversation.updatedAt
      });
    } catch (error) {
      console.error('Error creating conversation:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Settings Routes
  app.get('/api/settings', async (req, res) => {
    try {
      const userId = parseInt(req.query.userId as string);
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      let settings = await storage.getUserSettings(userId);
      
      // If no settings exist yet, create default settings
      if (!settings) {
        settings = await storage.createUserSettings({
          userId,
          theme: 'light',
          privacySettings: {
            profileVisibility: 'public',
            activityStatus: true,
            friendRequests: 'everyone',
            searchVisibility: true,
            tagApproval: true,
            twoFactorAuth: false,
            locationSharing: false
          },
          notificationSettings: {
            directMessages: true,
            friendRequests: true,
            mentions: true,
            comments: true,
            reactions: true,
            groupActivity: true,
            emailNotifications: false,
            pushNotifications: true
          },
          appearanceSettings: {
            theme: 'light',
            contentDensity: 'comfortable',
            animationsEnabled: true,
            highContrastMode: false,
            fontSizeAdjustment: 'default'
          }
        });
      }
      
      return res.status(200).json(settings);
    } catch (error) {
      console.error('Error fetching settings:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.patch('/api/settings', async (req, res) => {
    try {
      const { userId, ...updateData } = req.body;
      
      if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
      }
      
      const updatedSettings = await storage.updateUserSettings(userId, updateData);
      
      if (!updatedSettings) {
        return res.status(404).json({ message: 'Settings not found' });
      }
      
      return res.status(200).json(updatedSettings);
    } catch (error) {
      console.error('Error updating settings:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Discover Routes
  app.get('/api/discover/trending', async (req, res) => {
    try {
      // For simplicity in this MVP, we'll return mock trending topics
      const trendingTopics = [
        { id: 1, tag: "AITechnology", postsCount: "2.3K", category: "technology" },
        { id: 2, tag: "ProductDesign", postsCount: "1.8K", category: "design" },
        { id: 3, tag: "WebDevelopment", postsCount: "1.2K", category: "technology" },
        { id: 4, tag: "UXDesign", postsCount: "950", category: "design" },
        { id: 5, tag: "MobileDevelopment", postsCount: "845", category: "technology" },
        { id: 6, tag: "DataVisualization", postsCount: "780", category: "technology" },
        { id: 7, tag: "WorkplaceWellness", postsCount: "720", category: "lifestyle" },
        { id: 8, tag: "RemoteWork", postsCount: "690", category: "work" },
        { id: 9, tag: "SustainableDesign", postsCount: "650", category: "design" },
        { id: 10, tag: "ArtificialIntelligence", postsCount: "615", category: "technology" }
      ];
      
      // Filter by category if provided
      const category = req.query.category as string | undefined;
      const filteredTopics = category 
        ? trendingTopics.filter(topic => topic.category === category)
        : trendingTopics;
      
      return res.status(200).json(filteredTopics);
    } catch (error) {
      console.error('Error fetching trending topics:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/discover/groups', async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;
      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;
      const category = req.query.category as string | undefined;
      
      const groups = await storage.getGroups(limit, offset, category);
      
      // Enhance groups with creator info and member count
      const enhancedGroups = await Promise.all(groups.map(async (group) => {
        const creator = await storage.getUser(group.creatorId);
        
        return {
          ...group,
          creator: creator ? {
            id: creator.id,
            username: creator.username,
            displayName: creator.displayName,
            avatar: creator.avatar,
          } : undefined,
          membersCount: Math.floor(Math.random() * 10000) + 1000 // Mock member count for MVP
        };
      }));
      
      return res.status(200).json(enhancedGroups);
    } catch (error) {
      console.error('Error fetching groups:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  app.get('/api/discover/events', async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;
      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;
      
      const events = await storage.getEvents(limit, offset);
      
      // Enhance events with creator info and attendees count
      const enhancedEvents = await Promise.all(events.map(async (event) => {
        const creator = await storage.getUser(event.creatorId);
        
        return {
          ...event,
          creator: creator ? {
            id: creator.id,
            username: creator.username,
            displayName: creator.displayName,
            avatar: creator.avatar,
          } : undefined,
          attendees: {
            count: Math.floor(Math.random() * 300) + 20, // Mock attendees count for MVP
            avatars: [
              "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150",
              "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150",
              "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150"
            ]
          }
        };
      }));
      
      return res.status(200).json(enhancedEvents);
    } catch (error) {
      console.error('Error fetching events:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  return httpServer;
}
